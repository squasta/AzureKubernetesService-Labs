  ___                         
 |_ _|_ _  __ _ _ _ ___ ______
  | || ' \/ _` | '_/ -_|_-<_-<
 |___|_||_\__, |_| \___/__/__/
          |___/               

==============================================================
= Version 1.1
= Stanislas Quastana
= 14/10/19
==============================================================

Documentation : https://kubernetes.github.io/ingress-nginx/

You need the following Kubernetes Resources :
- a Service : https://kubernetes.io/docs/concepts/services-networking/service/
- an Ingress : https://kubernetes.io/docs/concepts/services-networking/ingress/
- a Configmap
- an Ingress Controller


    internet
        |
   [ Ingress ]
   --|-----|--
   [ Services ]


# Create a service (aka Load Balancer) for nginx-basicdeployment
kubectl apply -f Service-Deployment-nginx.yml

# Check IP of services (internal IP)
kubectl get services

# Create an Ingress Controller, first : prerequisites
# Mandatory command to execute to prepare prerequisites for nginx ingress in Kubernetes
# this will create configmap, clusterrolebinding, ngninx pod...
# documentation : https://kubernetes.github.io/ingress-nginx/deploy/#prerequisite-generic-deployment-command
# If you are using a Kubernetes version previous to 1.14, you need to change kubernetes.io/os to beta.kubernetes.io/os at line 217 of mandatory.yaml, see Labels details.
# source of file : https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml
kubectl apply -f mandatory.yaml

# Create an Ingress Controller (in Azure, Azure Load Balancer and Azure Public IP)
# It creates an external service (in Azure : an Azure LB + a public IP)
# source of file used here : https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud-generic.yaml
kubectl apply -f cloud-generic.yaml

# Check External-IP adress of Ingress Controller (Service) - replay following command until you get an external IP (can take few seconds)
kubectl get service -n ingress-nginx

# Create an Ingress (rules that are applied on Ingress Controller)
kubectl apply -f Ingress.yml

# Check your Ingress  (repeat until you get the public IP in the result of the following command)
kubectl get ingress

# Check pods that are running ingress-ngnix
kubectl get pods --all-namespaces -l app.kubernetes.io/name=ingress-nginx

# Open a web browser and connect to http://ingressIP

# To detect which version of the ingress controller is running, exec into the pod and run nginx-ingress-controller version command
POD_NAMESPACE=ingress-nginx
POD_NAME=$(kubectl get pods -n $POD_NAMESPACE -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')
kubectl exec -it $POD_NAME -n $POD_NAMESPACE -- /nginx-ingress-controller --version


***************************************************************************
*** Other way to Deploy an ngnix ingress controller with Helm *************
helm install stable/nginx-ingress --name my-nginx

if your Kubernetes cluster has RBAC enabled (that would be a good idea and
this is Azure Kubernetes Service default setting)
helm install stable/nginx-ingress --name my-nginx --set rbac.create=true
***************************************************************************


// Configure ingress to accept only url with your domain name

# on your DNS zone create a A DNS record that match to your Ingress public IP 
ex: web.specialk8s.shop 

Documentation : https://docs.microsoft.com/en-us/cli/azure/network/dns/record-set/a?view=azure-cli-latest#az-network-dns-record-set-a-add-record
If you use Azure DNS
ex :
az network dns record-set a add-record --ipv4-address 40.74.35.10 --record-set-name web --resource-group rg-meszonesdns --zone-name specialk8s.shop --subscription "Insert here the name of your Azure Subscription"


# modify host line in Ingress-version2.yml to match your FQDN. save changes.
kubectl apply -f Ingress-version2.yml

# Open a browser and try to connect to http://ipaddressofIngress
You should get a 404 Not Found

# Open a browser and try to connect to http://yourfqdn
It should work


# Open a browser and try to connect to https://yourfqdn
# Your browser should tell you that your connection is not secure (NET::ERR_CERT_AUTHORITY_INVALID)
# click sur advanced and proceed to fqdn... if you are using a Chromium based browser
# Click sur advanced and Accept risk & continue if you are using Mozilla Firefox
# It should load the nginx web site, open certificate info to check that certificate is a Kubernetes self signed certificate (that is the reason of security warning)



